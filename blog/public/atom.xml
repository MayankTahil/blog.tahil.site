<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech Blog</title>
  
  <subtitle>DevOps, Cloud, and Emerging Technology</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.tahil.site/"/>
  <updated>2017-12-15T19:33:06.000Z</updated>
  <id>http://blog.tahil.site/</id>
  
  <author>
    <name>Mayank Tahilramani</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Introduction to Docker Images and Containers</title>
    <link href="http://blog.tahil.site/docker-101-mod1/"/>
    <id>http://blog.tahil.site/docker-101-mod1/</id>
    <published>2017-12-15T01:28:29.000Z</published>
    <updated>2017-12-15T19:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center"><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Module 0</a></th><th style="text-align:center"><a href="/docker-101-mod1">Module 1</a></th><th style="text-align:center"><a href="/docker-101-mod2">Module 2</a></th><th style="text-align:center"><a href="/docker-101-mod3">Module 3</a></th></tr></thead><tbody></tbody></table><h1>Module 1: Running Docker Containers</h1><p>Once you have Docker installed locally, you can verify your installation by simply typing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>to see an output similar to:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker version 17.06.0-ce, build 02c1d87</span><br></pre></td></tr></table></figure><blockquote><p>If you get a permissions errors on your local docker machine, type <code>sudo docker --version</code> to complete the task. The current user must be in <a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/" target="_blank" rel="noopener">sudoers or docker group</a> to execute docker commands.</p></blockquote><a id="more"></a> <h2>Docker Images</h2><p>All Docker containers are based off <a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/" target="_blank" rel="noopener">Docker images</a>. Docker images are built up from a series of layers. Each layer represents an instruction or resulting block storage changes to the container’s filesystem. Each layer except the very last one is read-only, so once an image is made, any changes to data in a running container are made on a separate R/W layer. Think of it as application layering where the first image layer is always a blank minimalistic starting block from <a href="https://hub.docker.com/_/scratch/" target="_blank" rel="noopener">scratch</a> and changes are done by installing dependencies or applications that you desire to package with your docker image. See the visual below to illustrate the concept of image layering:</p>  <p>You can store docker images in several places:</p><ul><li><a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">1. Docker Hub</a></li><li><a href="https://quay.io/tour/" target="_blank" rel="noopener">2. Other Public Repositories</a></li><li><a href="http://blog.thoward37.me/articles/where-are-docker-images-stored/" target="_blank" rel="noopener">3. Locally on your machine</a></li><li><a href="https://docs.docker.com/registry/deploying/#storage-customization" target="_blank" rel="noopener">4. Private Docker registries</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/save/" target="_blank" rel="noopener">5. In a tar archive</a></li></ul><p>In this tutorial we will mainly be concerning ourselves with <strong>#1</strong> where we are pulling images from Docker Hub.</p><hr><h2>Exercise 1 : Pulling Docker Images</h2><p>Before any container is run, a copy of the docker image is always stored locally on the host. In this exercise we will pull a docker image from docker hub onto the docker host.</p><h3>Step 1 : Pull an Image from Docker Hub</h3><p>To pull an image down locally onto a host, run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mayankt/webserver:a</span><br></pre></td></tr></table></figure><p>Here is a break down of the command as follows:</p><table><thead><tr><th>Command</th><th></th><th>Details</th></tr></thead><tbody><tr><td><code>docker pull</code></td><td></td><td>This docker command that tells docker engine to pull an image down from somewhere</td></tr><tr><td><code>mayankt/webserver:a</code></td><td></td><td>This is the image name. By default, if a full FQDN is not specified, it is assumed you are pulling the image from docker hub. In this case, you will be pulling an image from my repository <a href="https://hub.docker.com/r/mayankt/webserver/" target="_blank" rel="noopener">mayankt</a> with an image titled <code>webserver</code> with the tag of <code>a</code>. <a href="https://www.techrepublic.com/article/how-to-use-docker-tags-to-add-version-control-to-images/" target="_blank" rel="noopener">Tagging</a> images can help with versioning of your docker images and many other CI/CD use cases as well.</td></tr></tbody></table><p>Once you run the command you should see an output similar to this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Pulling from mayankt/webserver</span><br><span class="line">3ac0c2aa6889: Pull complete </span><br><span class="line">ec2ec713dc4f: Pull complete </span><br><span class="line">ea0a5af9851c: Pull complete </span><br><span class="line">555bf6439b47: Pull complete </span><br><span class="line">71080d75d6eb: Pull complete </span><br><span class="line">c787ac6d0b0a: Pull complete </span><br><span class="line">1a9841bc3a47: Pull complete </span><br><span class="line">1a7ce5d6010a: Pull complete </span><br><span class="line">eec46f0642a8: Pull complete </span><br><span class="line">d2d3a856c0da: Pull complete </span><br><span class="line">f128b2a739b4: Pull complete </span><br><span class="line">1341f98ff817: Pull complete</span><br></pre></td></tr></table></figure><p>Which indicates that the image is being pulled from docker hub locally onto your docker host.</p><h3>Step 2 : List Local Docker Images</h3><p>Type the following command to see a list of all images stored locally on your host.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>Your output should resemble :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mayankt/webserver   a                   18f05d0cd921        2 months ago        27.9MB</span><br></pre></td></tr></table></figure><p>This output shows a 27.9 MB large docker image stored locally that can be run into instances of docker containers. All the <code>f128b2a739b4: Pull complete</code> outputs from the <code>docker pull</code> command above are the layers being pulled from Docker Hub of which constitute the <code>mayankt/webserver:a</code> docker image.</p><h3>Review</h3><p>A simple <code>docker pull &lt; image-name &gt;</code> commands shows how you can pull a docker image from the cloud directly. It’s not used until you run a container with it which we will do in the <a href="../Exercise-2">next Exercise</a>.</p> <img src="/docker-101-mod1/docker-pull.gif" title="Docker pull from Docker Hub"><hr><h2>Exercise 2 : Running a Docker Container</h2><p>Lets convert a docker image into a running instance of a docker container to host a simple website.</p><h3>Step 1 : Run a Docker Container</h3><p>We will issue <a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener"><code>docker run</code></a> commands to run containers. Type the following command to host a website on the docker host on port <code>10000</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --restart=always --name=cpx-blog -p 10000:80 mayankt/cpx-blog</span><br></pre></td></tr></table></figure><p>Here is the breakdown of the command from above:</p><p>Command | | Details<br>— | | —<br><code>docker run -dt</code> | | This will run the container detached in the background. Later we will see <a href="https://stackoverflow.com/questions/30172605/how-to-get-into-a-docker-container" target="_blank" rel="noopener">how we can attach to this container’s terminal</a>, but for now we will have the container running detached in the background as a daemon.<br><code>--restart=always</code> | | This will restart the container automatically if it crashes or if and when docker/host restart.<br><code>--name=cpx-blog</code> | | This gives the container a name for more intuitive reference in later docker commands. Without a name parameter, the container will be randomly assigned a name and can be referenced to via the random name or the hash id of the container.<br><code>-p 10000:80</code> | | This will expose port <code>10000</code> on the host and map it to port <code>80</code> on the container for access to the hosted website.<br><code>mayankt/cpx-blog</code> | | This identifies the <code>latest</code> tagged image by default because no explicit tag is specified. It will be pulled from dockerhub to use when running the container. <strong>Note:</strong> It is not necessary to pull a desired image before executing a <code>docker run</code> command. If the image does not exist locally, it will be automatically pulled from the designated registry (Docker Hub in our case).</p><p>Once you have entered the command, you will notice an output similar to below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image <span class="string">'mayankt/cpx-blog:latest'</span> locally</span><br><span class="line">latest: Pulling from mayankt/cpx-blog</span><br><span class="line">3ac0c2aa6889: Already exists</span><br><span class="line">ec2ec713dc4f: Already exists</span><br><span class="line">ea0a5af9851c: Already exists</span><br><span class="line">555bf6439b47: Already exists</span><br><span class="line">71080d75d6eb: Already exists</span><br><span class="line">c787ac6d0b0a: Already exists</span><br><span class="line">1a9841bc3a47: Already exists</span><br><span class="line">336c032aec9b: Pull complete</span><br><span class="line">bc3b4209c6c5: Pull complete</span><br><span class="line">3a5d33d6e1e0: Pull complete</span><br><span class="line">7e846adb4c7d: Pull complete</span><br><span class="line">Digest: sha256:141100857249a391261edf7335ffea1ca20478a15d3ac08c821561e7a8998ef9</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mayankt/cpx-blog:latest</span><br><span class="line">222bcc5747008a5c05f79d3a717f9132c8aa66234939677d3ebbcc5d883b5b5c</span><br></pre></td></tr></table></figure><blockquote><p>Notice some of the layers already exist locally from our previous webserver-a pull because both images use mutual base images that can be recycled and save on local space. Only deltas or layers that make cpx-blog unique from webserver-a are pulled that are not stored locally. Also the output provided in the last line <code>222bcc5747008a5c05f79d3a717f9132c8aa66234939677d3ebbcc5d883b5b5c</code> is the long unique id of the running container that can be referenced in future docker commands alternative to <code>cpx-blog</code>.</p></blockquote><h3>Step 2 : List all Running Containers</h3><p>To see all of your running containers type the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>That will yield an output similar to below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS              PORTS                            NAMES</span><br><span class="line">222bcc574700        mayankt/cpx-blog    <span class="string">"/bin/sh -c 'nginx'"</span>   About a minute ago   Up About a minute   443/tcp, 0.0.0.0:10000-&gt;80/tcp   cpx-blog</span><br></pre></td></tr></table></figure><p>This shows that the container named cpx-blog is running based on the image mayankt/cpx-blog with an external 10000 port exposed on the local host for remote access. Navigate to <a href="http://localhost:1000" target="_blank" rel="noopener"><code>htt://localhost:10000</code></a> to see the website.</p><p>To stop your running container, type the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop cpx-blog</span><br></pre></td></tr></table></figure><p>Now to see all of your running and <strong>non running</strong> containers, type the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>That will yield an output similar to below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                 COMMAND                CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">f407d06318f0        mayankt/cpx-blog   <span class="string">"/bin/sh -c 'nginx'"</span>   10 minutes ago      Exited (137) 3 seconds ago                       cpx-blog</span><br></pre></td></tr></table></figure><h3>Step 3 : Enter Container’s Shell</h3><p>If you container is not running already, start the container with the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start cpx-blog</span><br></pre></td></tr></table></figure><p>Then type the following command to enter the terminal shell of the container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it cpx-blog /bin/sh</span><br></pre></td></tr></table></figure><p>The breakdown of the command as follows:</p><p>Command | | Details<br>— | | —<br><code>docker exec -it</code> | | This will execute a command on the container with an interactive terminal (<code>-it</code>). We could execute commands in the background with a <code>-dt</code> if we wanted to, but we wouldn’t see the outcome and the command we’re running in this example is invoking a shell. If we wanted to run a script and not interact with it, we could have used the <code>-dt</code> flag.<br><code>cpx-blog</code> | | This denotes to which running container to execute the command against. In our case, it’s the cpx-blog container.<br><code>/bin/sh</code> | | This is the command itself that we want to execute in the container. In this example we are invoking the shell for terminal access into our container. In other examples we could execute specific scripts or bash files as well (i.e. <code>/var/scripts/init-db.sh</code> or any other file locally stored within the container).</p><p>After executing the command, you should have entered into the shell prompt of the container itself. Lets manipulate some files inside the container and see them reflected onto the website.</p><p>Within the container shell, enter the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/wwww/index.html</span><br></pre></td></tr></table></figure><blockquote><p><code>vi</code> invokes a CLI text editor. It is functionally the same thing as notepad or sublime text, but geared for CLI interfaces not GUI interfaces. <code>vi</code> utility helps edit files in the terminal.</p></blockquote><p>Once you have opened the <code>index.html</code> file, scroll down and change the text between :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class=&quot;brand-title&quot;&gt;NetScaler NITRO Blogs&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>…to anything you desire, such as :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class=&quot;brand-title&quot;&gt;LEARN DOCKER!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Edit text by entering the <code>i</code> key and then navigating the cursor to delete text you want to remove then typing in text you want to replace it with. Once completed, hit the <code>esc</code> key then <code>shift</code> + <code>:</code> key. Type <code>wq</code> to write and quit. You can then hit <code>ctrl</code> + <code>l</code> to clear the screen if you desire.</p></blockquote><p>Once back into the container’s CLI, simply type <code>exit</code> to logout and return back to the host’s terminal.</p><p>Once the <code>index.html</code> is updated, refresh your browser or navigate back to <a href="http://localhost:10000" target="_blank" rel="noopener"><code>http://localhost:10000</code></a> to observer changes to your site.</p><h3>Review</h3><p>This concludes how to run a container with <code>docker run</code> command, how to attach to a container’s terminal via the <code>docker exec -it</code> command, and how to manipulate data within a running container.</p> <img src="/docker-101-mod1/docker-run.gif" title="Running Docker Container">]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Module 0&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod1&quot;&gt;Module 1&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod2&quot;&gt;Module 2&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod3&quot;&gt;Module 3&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Module 1: Running Docker Containers&lt;/h1&gt;

&lt;p&gt;Once you have Docker installed locally, you can verify your installation by simply typing&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;to see an output similar to:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Docker version 17.06.0-ce, build 02c1d87&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;If you get a permissions errors on your local docker machine, type &lt;code&gt;sudo docker --version&lt;/code&gt; to complete the task. The current user must be in &lt;a href=&quot;https://docs.docker.com/engine/installation/linux/linux-postinstall/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sudoers or docker group&lt;/a&gt; to execute docker commands.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tutorials" scheme="http://blog.tahil.site/categories/tutorials/"/>
    
    
      <category term="docker" scheme="http://blog.tahil.site/tags/docker/"/>
    
      <category term="docker-cli" scheme="http://blog.tahil.site/tags/docker-cli/"/>
    
      <category term="docker images" scheme="http://blog.tahil.site/tags/docker-images/"/>
    
      <category term="docker 101" scheme="http://blog.tahil.site/tags/docker-101/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Docker Files</title>
    <link href="http://blog.tahil.site/docker-101-mod2/"/>
    <id>http://blog.tahil.site/docker-101-mod2/</id>
    <published>2017-12-15T01:28:29.000Z</published>
    <updated>2017-12-15T07:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center"><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Module 0</a></th><th style="text-align:center"><a href="/docker-101-mod1">Module 1</a></th><th style="text-align:center"><a href="/docker-101-mod2">Module 2</a></th><th style="text-align:center"><a href="/docker-101-mod3">Module 3</a></th></tr></thead><tbody></tbody></table><h1>Module 2: Create an Image via Dockerfiles</h1><p>Given that all Docker containers are based off specific <a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/" target="_blank" rel="noopener">Docker images</a>, in this module we will explore one of many ways to create Docker Images that define your custom docker containers. The following list a few ways to create customer images docker images:</p><ol><li><p><a href="https://docs.docker.com/engine/reference/commandline/save/" target="_blank" rel="noopener">Save a running container into an image</a></p><ul><li>In this method, users initially run a docker container based on a desired base image. Then after changes are made by <code>docker exec -it</code> or other means on the running container, the live container is ultimately saved into a <code>.tar</code> archive in its desired state that can be later <a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noopener">loaded</a> to run multiple new instances of the custom image.</li></ul></li></ol><a id="more"></a> <ol start="2"><li><p>Defining a <a href="https://www.digitalocean.com/community/tutorials/docker-explained-using-dockerfiles-to-automate-building-of-images" target="_blank" rel="noopener">Dockerfile</a></p><ul><li>This method is the most robust and more commonly use method to define and create docker images. A Dockerfile is essentially a recipe of commands to execute on a defined base image that constitute the desired state of a custom docker image. Consider the traditional workflow to configure a webserver which requires executing of scripts, updating local packages, pulling of code from various repositories, installing dependencies, etc. before the webserver is in its desired state. A Dockerfile can define those steps towards a desired state thus allowing changes to be made independently on external packages, code repositories, etc. and the Dockerfile will simply execute those commands and operations when you desire to build your custom container image.</li></ul></li></ol><h2>Dockerfiles</h2><p>The advantage of a Dockerfile over just storing the binary image (or a snapshot/template in other virtualization systems) is that the automatic builds will ensure you have the latest version of code, packages, and external resources available in your docker container. This is a good thing from a security perspective, as you want to ensure you’re not installing any vulnerable software. This is also a good thing from an operational perspective because it allows you to rapidly build out isolated environments based on defined recipe that can pull from external resources like git to compile and build microservices.</p><p>Below is an example of a simple <a href="/_code/docker-101/Dockerfile" download="Dockerfile">Dockerfile</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM fnichol/uhttpd</span><br><span class="line">MAINTAINER Mayank Tahilramani and Brian Tannous</span><br><span class="line">COPY ./cpx-blog /www</span><br><span class="line">EXPOSE 80</span><br><span class="line">ENTRYPOINT /usr/sbin/run_uhttpd -f -p 80 -h /www</span><br><span class="line">CMD [&quot;&quot;]</span><br></pre></td></tr></table></figure><p>Breakdown of details below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM fnichol/uhttpd</span><br></pre></td></tr></table></figure><p>This denotes the base image to use. In this case, it’s an image from Docker Hub of user <a href="https://github.com/fnichol/docker-uhttpd" target="_blank" rel="noopener"><code>fnichol</code></a> who has already made a bare bone minimalistic docker image with the service <a href="https://httpd.apache.org/docs/2.4/programs/httpd.html" target="_blank" rel="noopener">httpd</a> pre-installed which allows us to hosts websites. All we have to do is provide our HTML code and relevant data. From this image, we will make changes and define our custom image based on subsequent commands in our Dockerfile.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER Mayank Tahilramani and Brian Tannous</span><br></pre></td></tr></table></figure><p>This is just meta data for the image on who the maintainer/creator of the image and Dockerfile are.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY ./cpx-blog /www</span><br></pre></td></tr></table></figure><p>This command simply copies everything <code>cpx-blog</code> directory that is local to the Dockerfile into the <code>/www</code> directory that is local to the container. Within the container there must already be a <code>/www</code> directory (as specified by the <a href="https://github.com/fnichol/docker-uhttpd" target="_blank" rel="noopener">base image</a> to put content in. In this case, any html code or data that will be served by httpd must reside in the <code>/www</code> directory within the container.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><p>This command simply states that port 80 will be open on the container as expected to host a website.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT /usr/sbin/run_uhttpd -f -p 80 -h /www</span><br></pre></td></tr></table></figure><p>This command dictates what to execute when the container starts. Note that the container’s lifespan is directly dependent on the service it runs on start, in our case the httpd (found at <code>/usr/sbin/run_uhttpd</code>) is executed. The entrypoint script basically starts the webservice <code>httpd</code> hosting content in <code>/www</code>. If for whatever reason the uhttpd service itself fails, hangs, or stops, the running container will stop running as well.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;&quot;]</span><br></pre></td></tr></table></figure><p>This command is similar to <code>ENTRYPOINT</code> where traditionally you would define the default command to execute when the container starts. In this case, our ENTRYPOINT script is handling that for us so CMD can be left empty.</p><ul><li><code>CMD</code> is a mandatory declaration in a Dockerfile.</li><li>Check out this resource to learn more about difference in use cases between <a href="https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/" target="_blank" rel="noopener"><code>CMD</code> vs <code>ENTERYPOINT</code></a></li></ul><hr><h2>Exercise 1 : Write a Dockerfile</h2><p>In this exercise we will create a new docker image locally from a Dockerfile as discussed in <a href="../">Module 2</a> overview. We will also make edits to the Dockerfile to customize the image to our preference.</p><h3>Step 1 : Clone Git Repository</h3><p>In the <code>/data</code> directory on your host, clone the following git repository:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change the working directory to /data on the docker host</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone a copy of the github project locally</span></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/Citrix-TechSpecialist/GoLang-cpx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># List the contents in the /data directory to see the GoLang-cpx project directory</span></span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>in the <code>/GoLang-cpx</code> directory there is a <code>Dockerfile</code>. Lets view the contents with the <code>cat</code> command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Change working directory into the GoLang-cpx project</span><br><span class="line">cd GoLang-cpx</span><br><span class="line"></span><br><span class="line"># View what all is in the GoLang-cpx directory</span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line"># View the Dockerfile contents</span><br><span class="line">cat Dockerfile</span><br></pre></td></tr></table></figure><p>Once you <code>cat</code> the file, you will notice the following content in the <a href="_code/docker-101/Dockerfile">Dockerfile</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM fnichol/uhttpd</span><br><span class="line">MAINTAINER Mayank Tahilramani and Brian Tannous</span><br><span class="line">COPY ./cpx-blog /www</span><br><span class="line">EXPOSE 80</span><br><span class="line">ENTRYPOINT /usr/sbin/run_uhttpd -f -p 80 -h /www</span><br><span class="line">CMD [&quot;&quot;]</span><br></pre></td></tr></table></figure><p>The content above is pretty much the same we observed in the <a href="../">Module-2</a> overview. We will now build this container using the <a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noopener"><code>docker build</code></a> command.</p><h3>Step 2 : Build Docker Image</h3><p>Type the following command to build your docker image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t cpx-blog .</span><br></pre></td></tr></table></figure><p>Here is the breakdown of the command above:</p><table><thead><tr><th>Command</th><th>Details</th></tr></thead><tbody><tr><td><code>docker build</code></td><td>This basically tells the docker engine to build an image.</td></tr><tr><td><code>-t</code></td><td>This gives the image a name and optionally a tag in the <code>name:tag</code> format.</td></tr><tr><td><code>cpx-blog</code></td><td>This will be the name of the created docker image.</td></tr><tr><td><code>.</code></td><td>tells docker engine to look for a file named <em>Dockerfile</em> (by default) in the current directory.</td></tr></tbody></table><blockquote><p>Optionally if you named your <code>Dockerfile</code> something different like <code>sandbox.dockerfile</code> you can append the <code>-f sandbox.dockerfile</code> flag after <code>build</code> statement.</p></blockquote><p>You will see the following output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  1.773MB</span><br><span class="line">Step 1/6 : FROM fnichol/uhttpd</span><br><span class="line">latest: Pulling from fnichol/uhttpd</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">1775fca35fb6: Pull complete</span><br><span class="line">718e21306e6b: Pull complete</span><br><span class="line">889bfeab2d4e: Pull complete</span><br><span class="line">8ac43f1732b7: Pull complete</span><br><span class="line">cefd08b5f834: Pull complete</span><br><span class="line">a32be2ed7953: Pull complete</span><br><span class="line">1c78be7a5ec7: Pull complete</span><br><span class="line">74984e6e6d1c: Pull complete</span><br><span class="line">Digest: sha256:28e6f95cf33ae1336525034e2b9d58ddf3cc63a2cdd9edebc8765321d96da9e0</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> fnichol/uhttpd:latest</span><br><span class="line"> ---&gt; df0db1779d4d</span><br><span class="line">Step 2/6 : MAINTAINER Mayank Tahilramani and Brian Tannous</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 459db6d6a053</span><br><span class="line"> ---&gt; d51effaba5ae</span><br><span class="line">Removing intermediate container 459db6d6a053</span><br><span class="line">Step 3/6 : COPY ./cpx-blog /www</span><br><span class="line"> ---&gt; b1510a20020d</span><br><span class="line">Removing intermediate container b075c62a629b</span><br><span class="line">Step 4/6 : EXPOSE 80</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 84f5263cb817</span><br><span class="line"> ---&gt; f1f4672c9d5b</span><br><span class="line">Removing intermediate container 84f5263cb817</span><br><span class="line">Step 5/6 : ENTRYPOINT /usr/sbin/run_uhttpd -f -p 80 -h /www</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8e2b276c3aa9</span><br><span class="line"> ---&gt; 552dfe1be7a7</span><br><span class="line">Removing intermediate container 8e2b276c3aa9</span><br><span class="line">Step 6/6 : CMD</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 7c5da4990bea</span><br><span class="line"> ---&gt; 0c78968bbe81</span><br><span class="line">Removing intermediate container 7c5da4990bea</span><br><span class="line">Successfully built 0c78968bbe81</span><br><span class="line">Successfully tagged cpx-blog:latest</span><br></pre></td></tr></table></figure><p>You can also see the images on the local host with the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>…which shows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">cpx-blog            latest              0c78968bbe81        46 seconds ago      5.66MB</span><br><span class="line">fnichol/uhttpd      latest              df0db1779d4d        3 years ago         4.87MB</span><br></pre></td></tr></table></figure><p>Docker pulled the base image <code>fnichol/uhttpd</code> from Docker Hub as well as created the layer on top with the changes we added defined in our Dockerfile to create the <code>cpx-blog</code> image. This concludes the creation of the image. Next we will create <em>ONE</em> more image that is an updated version of the <code>cpx-blog</code> image before we run our containers in <a href="../Exercise-2">Exercise-2</a>.</p><h3>Step 3 : Tag a New Docker Image</h3><p>Lets make updates to our <code>Dockerfile</code> in <code>/data/GoLang-cpx</code>. Open the file up in <code>nano</code> with the following command. <code>nano</code> is nothing more than a simple text editor for CLI. It can be considered an equivalent to <a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> or <a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In the /data/GoLang-cpx directory enter the following command:</span></span><br><span class="line">sudo nano Dockerfile</span><br></pre></td></tr></table></figure><p>Update the file with your cursor and keyboard to reflect the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM fnichol/uhttpd</span><br><span class="line">MAINTAINER Mayank Tahilramani and Brian Tannous</span><br><span class="line">COPY ./cpx-blog /www</span><br><span class="line">WORKDIR /www</span><br><span class="line">RUN echo &quot;find /www -type f -exec sed -i \&quot;s/All rights reserved./Hosted by container: $&#123;HOSTNAME&#125;/g\&quot; &#123;&#125; \\;&quot; &gt; /tmp/update.sh &amp;&amp; chmod +x /tmp/update.sh</span><br><span class="line">EXPOSE 80</span><br><span class="line">ENTRYPOINT /tmp/update.sh &amp;&amp; /usr/sbin/run_uhttpd -f -p 80 -h /www</span><br><span class="line">CMD [&quot;&quot;]</span><br></pre></td></tr></table></figure><pre><code>&gt;To exit `nano` after you are done editing, enter the keys `ctrl` + `x` then `y` and `enter` to save and quit.</code></pre><p>Here are the details on the updated command lines added above:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /www</span><br></pre></td></tr></table></figure><p>This changes the working directory of the docker build engine when executing <code>RUN</code> commands in the next line. Note that you cannot simply change directories by a single <code>RUN</code> command for example <code>cd /www</code> because each time you execute a <code>RUN</code> command, docker spawns a new container and therefore the default working directory become <code>/</code>. See more context <a href="https://stackoverflow.com/questions/17891981/docker-run-cd-does-not-work-as-expected" target="_blank" rel="noopener">here</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN echo &quot;find /www -type f -exec sed -i \&quot;s/All rights reserved./Hosted by container: $&#123;HOSTNAME&#125;/g\&quot; &#123;&#125; \\;&quot; &gt; /tmp/update.sh &amp;&amp; chmod +x /tmp/update.sh</span><br></pre></td></tr></table></figure><p>This command simply creates a script <code>/tmp/update.sh</code> which finds all files in the <code>/www</code> directory and replaces strings in them which match the pattern “<em>All rights reserved.</em>” with the string “<em>Hosted by container: ${HOSTNAME}</em>” where <code>${HOSTNAME}</code> is a built in environmental variable in the running container that holds the container’s unique host name. By default the hostname of any container is it’s short uuid. This script will essentially replace the footer of all web pages which state “All rights reserved” with which container is specifically hosting the website.</p><blockquote><p>Note that this command creates a script <code>/tmp/update.sh</code> but does not execute it. This command needs to be executed in a final running container state, not during an intermediate step when building the final image. Hence this script created here is executed in the <code>ENTRYPOINT</code> step below.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT /tmp/update.sh &amp;&amp; /usr/sbin/run_uhttpd -f -p 80 -h /www</span><br></pre></td></tr></table></figure><p>This command dictates what to execute when the container starts. Note that the <a href="https://medium.com/@lherrera/life-and-death-of-a-container-146dfc62f808" target="_blank" rel="noopener">container’s lifespan</a> is directly dependent on the service it runs on start, in our case first the <code>/tmp/update.sh</code> script executes to update footers on all html pages, then the httpd (found at <code>/usr/sbin/run_uhttpd</code>) is executed. The entrypoint script basically starts the webservice hosting content in <code>/www</code>. If for whatever reason the uhttpd service itself fails, hangs, or stops, the running container will stop as well.</p><p>With the updated changes in our Dockerfile, we have introduced a new script into the container <code>/tmp/update.sh</code> which updated some HTML text on our website and is executed upon running the container as defined by our <code>ENTRYPOINT</code> statement.</p><p>Now lets build our new image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In the /data/GoLang-cpx directory enter the following command:</span></span><br><span class="line">docker build -t cpx-blog:v2 .</span><br></pre></td></tr></table></figure><p>View your images via the <code>docker images</code> command to see a new tagged version of the <code>cpx-blog</code> image was created.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /www</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">cpx-blog            v2                  7f4074f9eecf        9 seconds ago       5.66MB</span><br><span class="line">cpx-blog            latest              0c78968bbe81        25 minutes ago      5.66MB</span><br><span class="line">fnichol/uhttpd      latest              df0db1779d4d        3 years ago         4.87MB</span><br></pre></td></tr></table></figure><h3>Review</h3><p>In <strong><em>Step 1</em></strong> and <strong><em>Step 2</em></strong> we created 2 docker images of the same CPX-blog website. The first image was created using a Dockerfile form the <a href="https://github.com/Citrix-TechSpecialist/GoLang-cpx/" target="_blank" rel="noopener">GoLang-cpx</a> repository. The second image was created from a custom Dockerfile which added a script to update the footer of the website with the container’s hostname. Below is a overview of the steps above.</p>  <img src="/docker-101-mod2/docker-build.gif" title="docker build"><hr><h2>Exercise 2 : Run a Docker Container</h2><p>In this exercise we will create a two docker containers from two new images we created in the <a href="../Exercise-1">previous exercise</a>. We will also create a third container that uses volume mounts to share persistent data with the docker host.</p><h3>Step 1 : <code>sudo docker run</code></h3><p>Lets run our first container based off the image we created from the <a href="https://github.com/Citrix-TechSpecialist/GoLang-cpx/" target="_blank" rel="noopener">GoLang-cpx</a> repository. Enter the following command to run your docker container:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --name=cpx-blog-1 -p 10000:80 cpx-blog</span><br></pre></td></tr></table></figure><p>Here is the breakdown of the command:</p><table><thead><tr><th>Command</th><th></th><th>Details</th></tr></thead><tbody><tr><td><code>docker run -dt</code></td><td></td><td>This will run the container detached with a terminal in the background. Later we will see how we can attach to this container’s CLI, but for now we will have the container running detached in the background as a daemon.</td></tr><tr><td><code>--name=cpx-blog-1</code></td><td></td><td>This gives the container a name for more intuitive reference in later docker commands. Without a name parameter, the container will be randomly assigned a name and can be referenced to via the random name or the hash id of the container.</td></tr><tr><td><code>-p 10000:80</code></td><td></td><td>This will expose port <code>10000</code> on the host and map it to port <code>80</code> on the container for access to the hosted website.</td></tr><tr><td><code>cpx-blog</code></td><td></td><td>This identifies the image we want to use by the docker engine to base our container off of. It will not bother pulling from Dockerhub because the image is already stored locally given you have completed <a href="../Exercise-1">exercise 1</a>.</td></tr></tbody></table><p>You should receive an output of a long UID as a reference to the running container similar to <code>ed2348b56eda197a90313c8876ab4e6601b52406ba1c6740ccccd6e996565f60</code></p><p>You can view the running container by entering in the <code>docker ps</code> command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                   NAMES</span><br><span class="line">ed2348b56eda        cpx-blog            &quot;/bin/sh -c &apos;/usr/...&quot;   About a minute ago   Up About a minute   0.0.0.0:10000-&gt;80/tcp   cpx-blog-1</span><br></pre></td></tr></table></figure><p>Now lets view the website hosted by our docker container. If you are following along on your local machine, go to url <a href="http://localhost:10000" target="_blank" rel="noopener">http://localhost:10000</a>.</p><p>On the website, scroll down to the very bottom to notice the footer of this page stating: <code>2016. All rights reserved.</code> Make a note of this, because we are now going to run our new container that will have updated footer information.</p>  <img src="/docker-101-mod2/cpx-blog-1-footer.png" title="cpx-blog-1 site" alt="s footer"><p>Lastly, lets remove this container so we can recycle the host port <code>10000</code> for our new container.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f cpx-blog-1</span><br></pre></td></tr></table></figure><h3>Step 2 : Run an Updated Container</h3><p>Lets run our second container based off the image we created from the modified version of the Dockerfile in the <a href="https://github.com/Citrix-TechSpecialist/GoLang-cpx/" target="_blank" rel="noopener">GoLang-cpx</a> repository. Enter the following command to run your docker container:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --name=cpx-blog-2 -p 10000:80 cpx-blog:v2</span><br></pre></td></tr></table></figure><p>You can view the running container by entering in the <code>docker ps</code> command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                   NAMES</span><br><span class="line">6e115d1c21f5        cpx-blog:v2            &quot;/bin/sh -c &apos;/usr/...&quot;   About a minute ago   Up About a minute   0.0.0.0:10000-&gt;80/tcp   cpx-blog-2</span><br></pre></td></tr></table></figure><p>Now lets view the updated website hosted by our new docker container. If you are following along on your local machine, go to url <a href="http://localhost:10000" target="_blank" rel="noopener">http://localhost:10000</a>.</p><p>If you are following along in the sandbox environment, navigate your local browser to <a href="http://userX-lb.sl.americasreadiness.com" target="_blank" rel="noopener">http://userX-lb.sl.americasreadiness.com</a> where <code>X</code> denotes your user number in the FQDN.</p><p>On the website, scroll down to the very bottom and notice the footer of this page stating: <em>2016. Hosted by container: <strong>11ad31695df3</strong>.</em> The container hostname is showing up because of the <code>/tmp/update.sh</code> script that was executed when the container was run to update all <code>.html</code> footer code as defined in our new Dockerfile.</p>  <img src="/docker-101-mod2/cpx-blog-2-footer.png" title="cpx-blog-2 site" alt="s footer"><p>Lastly, lets remove this container so we can recycle the host port <code>10000</code> for our new container.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f cpx-blog-2</span><br></pre></td></tr></table></figure><h3>Step 3 : Persistent Volume Mounts</h3><p>Thus far we have seen the docker container host the website with the <code>.html</code> data local to it’s file system. Ideally, you would not want to store any persistent data on the container itself, rather you should store in on some network or hyperconverged storage solution that the container can access as if local instead. This allow you to de-coupling storage of persistent data in the container from the compute processing done by the container itself and allows you to be more agile, spreads your failure domain, and scale independently in storage and compute capacity.</p><p>In this In this step, we will run the same container as in <strong>step 1</strong>, but with a volume mount that shares a directory with the docker host mounted in the container to share persistent data. Enter the following command to run a docker container with a <a href="https://docs.docker.com/engine/reference/run/#volume-shared-filesystems" target="_blank" rel="noopener">volume mount</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dt --name=cpx-blog-3 -p 10000:80 -v /data/GoLang-cpx/cpx-blog:/www:rw cpx-blog</span><br></pre></td></tr></table></figure><p>Here is the breakdown of the new volume mount <code>-v</code> flag in the <code>docker run</code> command:</p><table><thead><tr><th>Command</th><th></th><th>Details</th></tr></thead><tbody><tr><td><code>-v /data/GoLang-cpx/cpx-blog:/www:rw</code></td><td></td><td>The <code>-v</code> flag denotes that this container will have a volume mount that is located on the local host at <code>/data/GoLang-cpx/cpx-blog</code> and that directory will be mapped to the <code>/www</code> directory that is local to the container. The container will have <em>read/write</em> permissions to this directory as denoted by the <code>:rw</code> at the end.</td></tr></tbody></table><ul><li><p>This flag allows us to remove the <code>COPY ./cpx-blog /www</code> command form our Dockerfile if desired to. However the pre-requisite of this container would become that a volume mount be provided at run time to host whatever content is in the mounted <code>/www</code> directory local to the container…</p></li><li><p>Adding volume mounts of persistent data to containers saves space as well, because now the data isn’t replicated in each container, rather multiple containers can instead reference the same volume mount on a NFS network share, for example, mounted on the local docker host.</p></li><li><p>Other services can also independently manipulate data in the volume mount directory on the host that have read-write access and it can be reflected in the running cpx-blog containers for example.</p></li></ul><p>Once you have your container running, lets view the site hosted by our new docker container. If you are following along on your local machine, go to url <a href="http://localhost:10000" target="_blank" rel="noopener">http://localhost:10000</a>.</p><p>You will notice that the site looks identical to it did in <strong>Step 1</strong>. Lets change some content to the title page to prove a point.</p><p>Enter the following command to edit text in the <code>index.html</code> of the home page of the blog:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /data/GoLang-cpx/cpx-blog/index.html</span><br></pre></td></tr></table></figure><p>Scroll down into the file where you see the line:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class=&quot;brand-title&quot;&gt;NetScaler NITRO Blogs&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>update that line to look like :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class=&quot;brand-title&quot;&gt;LEARN DOCKER!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>Save and quit <code>nano</code> by entering the keys <code>ctrl</code> + <code>x</code> then <code>y</code> and <code>enter</code>.</p><p>Now refresh your browser to the blog to view the updates changes. You should see a new title in the home page reflecting your changes to the <code>index.html</code></p><p>Lastly, lets remove this container so we can recycle the host port <code>10000</code> for subsequent Modules.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f cpx-blog-3</span><br></pre></td></tr></table></figure><h3>Review</h3><p>In this module, we ran a container hosting our website using a Dockerfile in the <a href="https://github.com/Citrix-TechSpecialist/GoLang-cpx/" target="_blank" rel="noopener">GoLang-cpx</a> repository. We also ran a container that has a script that ran at runtime to dynamically update the footer on each webpage to display the container’s hostname. Lastly, we deployed a third container that hosted the webpage through a volume mount where the data of the website only resided on the host and we showed that the data could be independently manipulated to reflect updates on our container hosted website.</p><p>Here is an overview of the previous 3 steps.</p>  <img src="/docker-101-mod2/docker-run-new.gif" title="docker run 3 containers">]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Module 0&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod1&quot;&gt;Module 1&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod2&quot;&gt;Module 2&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod3&quot;&gt;Module 3&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Module 2: Create an Image via Dockerfiles&lt;/h1&gt;
&lt;p&gt;Given that all Docker containers are based off specific &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker images&lt;/a&gt;, in this module we will explore one of many ways to create Docker Images that define your custom docker containers. The following list a few ways to create customer images docker images:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/save/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Save a running container into an image&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this method, users initially run a docker container based on a desired base image. Then after changes are made by &lt;code&gt;docker exec -it&lt;/code&gt; or other means on the running container, the live container is ultimately saved into a &lt;code&gt;.tar&lt;/code&gt; archive in its desired state that can be later &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/load/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;loaded&lt;/a&gt; to run multiple new instances of the custom image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="tutorials" scheme="http://blog.tahil.site/categories/tutorials/"/>
    
    
      <category term="docker" scheme="http://blog.tahil.site/tags/docker/"/>
    
      <category term="docker-cli" scheme="http://blog.tahil.site/tags/docker-cli/"/>
    
      <category term="docker images" scheme="http://blog.tahil.site/tags/docker-images/"/>
    
      <category term="docker 101" scheme="http://blog.tahil.site/tags/docker-101/"/>
    
      <category term="dockerfile" scheme="http://blog.tahil.site/tags/dockerfile/"/>
    
      <category term="storage" scheme="http://blog.tahil.site/tags/storage/"/>
    
      <category term="volume mount" scheme="http://blog.tahil.site/tags/volume-mount/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Docker Compose</title>
    <link href="http://blog.tahil.site/docker-101-mod3/"/>
    <id>http://blog.tahil.site/docker-101-mod3/</id>
    <published>2017-12-15T01:28:29.000Z</published>
    <updated>2017-12-15T07:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center"><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Module 0</a></th><th style="text-align:center"><a href="/docker-101-mod1">Module 1</a></th><th style="text-align:center"><a href="/docker-101-mod2">Module 2</a></th><th style="text-align:center"><a href="/docker-101-mod3">Module 3</a></th></tr></thead><tbody></tbody></table><h1>Module 3: Using Docker Compose</h1><p>Let’s assume by now you are familiar with basic Docker commands such as <a href="https://docs.docker.com/engine/reference/run/#volume-shared-filesystems" target="_blank" rel="noopener"><code>docker run</code></a>, <a href="https://docs.docker.com/engine/reference/commandline/ps/" target="_blank" rel="noopener"><code>docker ps</code></a>, <a href="https://docs.docker.com/engine/reference/commandline/pull/" target="_blank" rel="noopener"><code>docker pull</code></a>, <a href="https://docs.docker.com/engine/reference/commandline/rm/" target="_blank" rel="noopener"><code>docker rm</code></a>, and the various parameter flags (such as <code>-v</code> for volume mounts) associated with some of these commands.</p><p>It should also be obvious at this point that deploying docker containers at scale by hand with <code>docker run</code> commands can be very involved and, at time, too complicated with multiple lines of <code>docker ..</code> commands to deploy a large environment. Luckily, docker containers are not meant to be deployed via individual commands, rather they are often deployed to a desired state using various other tools that help automate and/or orchestrate microservices backed by docker containers. Some of these accompanying tools are provided below for reference.</p><a id="more"></a> <table><thead><tr><th>Docker Tool</th><th>Details</th></tr></thead><tbody><tr><td><a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a></td><td>Google’s container orchestration and automation solution to schedule and maintain service state of docker containers.</td></tr><tr><td><a href="https://mesosphere.com/why-mesos/?utm_source=adwords&amp;utm_medium=g&amp;utm_campaign=43843512431&amp;utm_term=mesos&amp;utm_content=196225818929&amp;gclid=CjwKEAjwtJzLBRC7z43vr63nr3wSJABjJDgJ_9xn3RWHnkH_nDjxQs1X8U6YgQ0drZPoOTfLv9-4hhoCqN3w_wcB" target="_blank" rel="noopener">Mesos</a>/<a href="https://mesosphere.github.io/marathon/" target="_blank" rel="noopener">Marathon</a></td><td>Another Automation platform (Mesos) with an orchestration framework (Marathon) to ensure service state of docker containers.</td></tr><tr><td><a href="http://rancher.com/" target="_blank" rel="noopener">Rancher</a></td><td>One of my favorites, complimentary to K8. Rancher is an opensource container management solution that makes it easy to deploy and manage containers in their own ‘Cattle environments’ and can even operate and manage other orchestration platforms like Kubernetes, Mesos/Marathon, and Docker Swarm.</td></tr><tr><td><a href="https://docs.docker.com/swarm/overview/" target="_blank" rel="noopener">Docker Swarm</a></td><td>Docker’s solution to automation and orchestration of clustered resources to provide a pool of Docker hosts into a single, virtual Docker host.</td></tr><tr><td><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a></td><td>A automation tool for defining and running multi-container Docker applications. This tool is less sophisticated than the ones listed above and more simpler to use but with fewer features for larger deployments at scale.</td></tr></tbody></table><p><strong>In this module, we will be focusing on learning how to use Docker Compose to provision a self contained development environment based on a single input file that describes our desired state and configuration.</strong></p><h2>Docker Compose</h2><blockquote><p>Source of description comes from <a href="https://docs.docker.com/compose/overview/" target="_blank" rel="noopener">Docker’s documentation</a>.</p></blockquote><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application’s services. Then, using a single command, you create and start all the services from your configuration.</p><p>Using Compose is basically a three-step process.</p><p><strong>Step 1</strong>: Define your container with a <code>Dockerfile</code> so it can be reproduced anywhere. Either have provide the <a href="https://docs.docker.com/compose/reference/build/" target="_blank" rel="noopener">Dockerfile as an input</a> or have the defined container hosted in a <a href="https://docs.docker.com/registry/" target="_blank" rel="noopener">docker registry</a> like <a href="hub.docker.com/">docker hub</a>.</p><p><strong>Step 2</strong>: Define the containers that make up your microservices in a <code>docker-compose.yml</code> file so it can be run together with other containers in an isolated environment. The <code>docker-compose.yml</code> basically consist of <code>key</code> : <code>value</code> pairs as per the <a href="https://github.com/Animosity/CraftIRC/wiki/Complete-idiot's-introduction-to-yaml" target="_blank" rel="noopener">yaml syntax</a> describing the desired state of your services.</p><p><strong>Step 3</strong>: Lastly, run the command <code>docker-compose up</code> and Compose will start and run your entire microservice based app as per the desired state.</p><h2>Overview</h2><p>In this module, we are going to automate the deployment of a simple, self contained, dockerized <a href="https://github.com/Citrix-TechSpecialist/nitro-ide" target="_blank" rel="noopener">sandbox environment</a> to write scripts that issue <a href="http://docs.citrix.com/ja-jp/netscaler/11/nitro-api.html" target="_blank" rel="noopener">NITRO</a> commands to your NetScaler ADCs. In this case we will be issuing commands to a <a href="microloadbalancer.com">NetScaler CPX</a> that will be locally provisioned on your machine to load balance simple containerized websites. However, it should be noted that this tutorial can be translated to develop and issue commands against other <a href="https://www.citrix.com/products/netscaler-adc/platforms.html" target="_blank" rel="noopener">NetScaler ADCs</a> as well if desired.</p><p>The desired environment will have the following topology:</p>  <img src="/docker-101-mod3/topology.jpg" title="Dev Box Topology"><table><thead><tr><th>Services</th><th>Details</th></tr></thead><tbody><tr><td><strong>Webserver A</strong></td><td>Static containerized HTTP website</td></tr><tr><td><strong>Webserver B</strong></td><td>Static containerized HTTP website</td></tr><tr><td><strong>NetScaler CPX</strong></td><td>This will be the target NetScaler to send NITRO API calls to load balance webserver A and webserver B.</td></tr><tr><td><strong>Cloud9 IDE</strong></td><td>Web-based Interactive Developer Environment that allows for rapid scripting and coding through a web browser.</td></tr></tbody></table><blockquote><p>All the services above will be isolated in a dedicated <a href="https://docs.docker.com/engine/userguide/networking/" target="_blank" rel="noopener">Docker Network</a>. Individual web interfaces that we will need direct external access to will have <a href="https://docs.docker.com/compose/compose-file/compose-file-v2/#ports" target="_blank" rel="noopener">external ports mapped</a> to the container for access from the underlay network (basically your host’s LAN).</p></blockquote><hr><h2>Exercise 1 : Create docker-compose.yaml</h2><p>Instead of creating a <code>docker-compose.yml</code> file from scratch, we are going to copy one from another repository to get started. We will then examine the file and understand it’s anatomy before finally making edits to suite our environment needs.</p><h3>Step 1</h3><p>To get started, enter the following commands to clone a repository with a <code>docker-compose.yml</code> file already made for us. Navigate to the directory and view the contents with <code>nano</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change directory to the workspace you want to clone the repository</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone the desired repository</span></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/Citrix-TechSpecialist/nitro-ide.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># enter the directory of the repository</span></span><br><span class="line"><span class="built_in">cd</span> nitro-ide</span><br><span class="line"></span><br><span class="line"><span class="comment"># View the file contents of docker-compose.yml</span></span><br><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p>Here is a copy of the <a href="/_code/docker-101/docker-compose.yaml" download="docker-compose.yaml">docker-compose.yaml</a> file for reference. It is recommended you open it in another tab in your browser to follow along.</p><p>Below are the desired services we want to configure and deploy.</p><ol><li><a href="https://hub.docker.com/r/mayankt/webserver/" target="_blank" rel="noopener">Webserver A</a> that is a static website site</li><li><a href="https://hub.docker.com/r/mayankt/webserver/" target="_blank" rel="noopener">Webserver B</a> that is a different static website</li><li><a href="https://c9.io/" target="_blank" rel="noopener">Cloud9 IDE</a> which we will use to write code and execute python scripts to automate configuration of NetScaler CPX.</li><li><a href="https://microloadbalancer.com" target="_blank" rel="noopener">NetScaler CPX</a> a NetScaler in a docker container that share the same API as other NetScaler ADCs.</li></ol><h3>Explaining the docker-compose.yml File</h3><p>Below are snippets of the <a href="/_code/docker-101/docker-compose.yaml" download="docker-compose.yaml"><code>docker-compose.yaml</code></a>  with comments (<code>#</code>) per line with details of each <code>key</code> : <code>value</code> pairs describing the desired deployment.</p><p><strong>Sandbox Network</strong></p><p>With Docker you can define specific container networks. In this case we are creating a <a href="https://docs.docker.com/engine/userguide/networking/#bridge-networks" target="_blank" rel="noopener">bridge network</a> specific to deploying only our desired containers to within a SDN boundary internal to the host.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">networks:                             # This defines that below are settings for docker networks</span><br><span class="line">  sandbox:                            # Name of the network</span><br><span class="line">    driver: bridge                    # The type of network driver to use</span><br><span class="line">    ipam:                             # Details of the network and IP space</span><br><span class="line">      config:                         # Configuration parameters</span><br><span class="line">        - subnet: &quot;192.168.13.0/24&quot;   # The desired subnet of the docker network</span><br></pre></td></tr></table></figure><p><strong>WebServer A / B</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webserver-a/b:                         # Service name</span><br><span class="line">    image: &quot;mayankt/webserver:a&quot;       # Docker container image to use</span><br><span class="line">    restart: always                    # Restart the service if it fails or the host reboots</span><br><span class="line">    networks:                          # This describes the docker networks the containers will be part of</span><br><span class="line">      sandbox:                         # Docker network&apos;s name</span><br><span class="line">        ipv4_address: &quot;192.168.13.11&quot;  # Static IP address of this service/container. You can leave this key:value out and to obtain an IP from Docker&apos;s IPAM</span><br><span class="line">    hostname: webserver-a              # Desired hostname of the container</span><br></pre></td></tr></table></figure><p><a href="http://docs.citrix.com/en-us/netscaler-cpx/12/deploy-using-docker-image-file.html" target="_blank" rel="noopener"><strong>NetScaler CPX</strong></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cpx:                                               # Service Name</span><br><span class="line">  image: &quot;store/citrix/netscalercpx:12.0-41.16&quot;    # Docker container image to use from Citrix&apos; registry</span><br><span class="line">  environment:                   # Environment Variables local to the container</span><br><span class="line">    EULA: &quot;yes&quot;                   # same as &apos;export EULA=&quot;yes&quot;&apos; as a pre-req for CPX to work</span><br><span class="line">  restart: always                                  # Restart the service if it fails or the host reboots</span><br><span class="line">  cap_add:                                         # Add specific container kernel capabilities https://docs.docker.com/engine/security/security/#linux-kernel-capabilities</span><br><span class="line">    - NET_ADMIN                                    # Perform various network-related operations https://linux.die.net/man/7/capabilities</span><br><span class="line">  ulimits                                          # Override the default (resource) ulimits for a container</span><br><span class="line">    core: -1                                       # Use unlimited CPU, up to the amount available on the host system.</span><br><span class="line">  networks:                                        # This describes the docker networks the containers will be part of</span><br><span class="line">    sandbox:                                       # Docker network&apos;s name</span><br><span class="line">      ipv4_address: &quot;192.168.13.20&quot;                # Static IP address of this service/container. You can leave this key:value out and to obtain an IP from Docker&apos;s IPAM</span><br><span class="line">  ports:                                           # Exposed ports mapped to the host from the container.</span><br><span class="line">    - &quot;10000-10050:10000-10050&quot;</span><br><span class="line">    - &quot;9080:80&quot;</span><br><span class="line">  hostname: ns-adc                                 # Desired hostname of the container</span><br></pre></td></tr></table></figure><p><a href="https://aws.amazon.com/cloud9/" target="_blank" rel="noopener"><strong>Cloud9 IDE</strong></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nitro-ide:                          # Service Name</span><br><span class="line">  image: &quot;mayankt/nitro-ide&quot;        # Docker container image to use from Citrix&apos; registry</span><br><span class="line">  restart: always                   # Restart the service if it fails or the host reboots</span><br><span class="line">  dns: 8.8.8.8                      # Specific DNS server to use for host name resolution from within the container</span><br><span class="line">  networks:                         # This describes the docker networks the containers will be part of</span><br><span class="line">    sandbox:                        # Docker network&apos;s name</span><br><span class="line">      ipv4_address: &quot;192.168.13.10&quot; # Static IP address of this service/</span><br><span class="line">  ports:                            # Exposed ports mapped to the host from the container.</span><br><span class="line">    - &quot;9090:80&quot;</span><br><span class="line">    - &quot;9091:8000&quot;</span><br><span class="line">  links:                            # Link to containers in another service given service name and/or a link alias (&quot;SERVICE:ALIAS&quot;). &quot;ping web-a&quot; will ping the webserver-a service from within the container.</span><br><span class="line">    - &quot;cpx&quot;</span><br><span class="line">    - &quot;webserver-a:web-a&quot;</span><br><span class="line">    - &quot;webserver-b:web-b&quot;</span><br><span class="line">  volumes:                          # Volume mounts local to the host mapped to a directory local to the container with read/write access (rw)</span><br><span class="line">      - $&#123;DATA_DIR&#125;:/workspace:rw      </span><br><span class="line">  hostname: nitro-ide               # Desired hostname of the container</span><br></pre></td></tr></table></figure><blockquote><p>Note you may have to uncomment the <code>volumes</code> section to mount volumes in the docker file that is pulled from the repository. Use <code>nano</code> to remove the <code>#</code> from the <code>volumes:</code> block.</p></blockquote><h3>Step 2</h3><p>Set the environmental variable <code>DATA_DIR</code> to <code>/data</code> on the docker host. This environment variable will substitute the value <code>/data</code> into the docker compose file when we provision our containers. Type the following on your docker host:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DATA_DIR=&quot;/data&quot;`</span><br></pre></td></tr></table></figure><p>Verify that the environmental variable was set successfully by typing the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $DATA_DIR</span><br></pre></td></tr></table></figure><p>It should return the <code>/data</code> directory path.</p><h3>Review</h3><p>In this module we clones a repository with our desired compose file. We explored what constitutes a <code>docker-compose.yml</code> file and what the various parameters mean. We set the value <code>/data</code> for a placeholder in the compose file that took in an environment variable to specify which local directory will be mapped to our IDE’s local workspace <code>/workspace</code> so we can share data from host to container.</p><p>Here is an overview of configuration steps:</p>  <img src="/docker-101-mod3/docker-compose.gif" title="docker-compose up -d"><hr><h2>Exercise 2 : Compose an Environment</h2><p>Once you have your <a href="/_code/docker-101/docker-compose.yaml" download="docker-compose.yaml">docker-compose.yaml</a> set, you can move forward with provisioning your environment.</p><h3>Step 1 : Provision an Environment</h3><p>In the <code>/data/nitro-ide</code> directory, enter the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Navigate to the repository local to your host</span><br><span class="line">cd /data/nitro-ide</span><br><span class="line"></span><br><span class="line"># Issue the docker compose command to provision your environment</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><blockquote><p>The <code>-d</code> in the <a href="https://docs.docker.com/compose/reference/up/" target="_blank" rel="noopener"><code>docker-compose up -d</code></a> specifies that containers run in the background in detached mode.</p></blockquote><p>You should observe an output similar to the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Pulling cpx (store/citrix/netscalercpx:12.0-41.16)...</span><br><span class="line">12.0-41.16: Pulling from store/citrix/netscalercpx</span><br><span class="line">4e1f679e8ab4: Pull complete</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">588f5003e10f: Pull complete</span><br><span class="line">Digest: sha256:31a65cfa38833c747721c6fbc142faec6051e5f7b567d8b212d912b69b4f1ebe</span><br><span class="line">Status: Downloaded newer image for store/citrix/netscalercpx:12.0-41.16</span><br><span class="line">Pulling nitro-ide (mayankt/nitro-ide:latest)...</span><br><span class="line">latest: Pulling from mayankt/nitro-ide</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">9581fa7fd579: Pull complete</span><br><span class="line">Digest: sha256:53c464876633e95f8e11ea821c50add0ff8e00a70c5aacd65f465d2d3045d8d3</span><br><span class="line">Status: Downloaded newer image for mayankt/nitro-ide:latest</span><br><span class="line">Pulling webserver-b (mayankt/webserver:b)...</span><br><span class="line">b: Pulling from mayankt/webserver</span><br><span class="line">3ac0c2aa6889: Pull complete</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">4484f1613730: Pull complete</span><br><span class="line">Digest: sha256:5807d78ba9c3892238a1eef2763c82f719d077b02a0c087122b816d276f0fbc4</span><br><span class="line">Status: Downloaded newer image for mayankt/webserver:b</span><br><span class="line">Pulling webserver-a (mayankt/webserver:a)...</span><br><span class="line">a: Pulling from mayankt/webserver</span><br><span class="line">3ac0c2aa6889: Already exists</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">f128b2a739b4: Already exists</span><br><span class="line">1341f98ff817: Pull complete</span><br><span class="line">Digest: sha256:921d4054855c335dcd48a83bd881fa9059fa003f62f1b29bbe4b3a40fc79cc9a</span><br><span class="line">Status: Downloaded newer image for mayankt/webserver:a</span><br><span class="line">Creating nitroide_webserver-b_1</span><br><span class="line">Creating nitroide_nitro-ide_1</span><br><span class="line">Creating nitroide_cpx_1</span><br><span class="line">Creating nitroide_webserver-a_1</span><br></pre></td></tr></table></figure><p>You can validate your desired containers are running by issuing a <code>docker ps</code> command to see all running containers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS              PORTS             </span><br><span class="line">                                                                     NAMES</span><br><span class="line">37892600b3d6        store/citrix/netscalercpx:12.0-41.16   &quot;/bin/sh -c &apos;bash ...&quot;   13 seconds ago      Up 10 seconds       22/tcp, 443/tcp, 1</span><br><span class="line">61/udp, 0.0.0.0:10000-10050-&gt;10000-10050/tcp, 0.0.0.0:9080-&gt;80/tcp   nitroide_cpx_1</span><br><span class="line">772b633440d7        mayankt/webserver:a                    &quot;/bin/sh -c &apos;nginx&apos;&quot;     13 seconds ago      Up 10 seconds       80/tcp, 443/tcp   </span><br><span class="line">                                                                     nitroide_webserver-a_1</span><br><span class="line">aeef73f08b84        mayankt/nitro-ide                      &quot;supervisord -c /e...&quot;   13 seconds ago      Up 11 seconds       3000/tcp, 0.0.0.0:</span><br><span class="line">9090-&gt;80/tcp, 0.0.0.0:9091-&gt;8000/tcp                                 nitroide_nitro-ide_1</span><br><span class="line">bb50c29a35c8        mayankt/webserver:b                    &quot;/bin/sh -c &apos;nginx&apos;&quot;     13 seconds ago      Up 10 seconds       80/tcp, 443/tcp   </span><br><span class="line">                                                                     nitroide_webserver-b_1</span><br></pre></td></tr></table></figure><h3>Step 2 : Access your IDE</h3><p>Once all your containers are running successfully, navigate to your IDE’s web console. On your local machine, go to url <a href="http://localhost:9090" target="_blank" rel="noopener">http://localhost:9090</a>.</p><blockquote><p>Please wait up to 60 seconds for the IDE and CPX to fully load before they are accessible via the web console. Usually services are available within 30 seconds of deployment.</p></blockquote><p>You should be greeted with Cloud9’s loading page and then ultimately the IDE editor pane. Within the side pane you should notice your <code>workspace</code> directory and within that directory you should see the <code>nitro-ide</code> repository on your docker host.</p><p>You can select any file to open and edit it or to examine it. You even have access to the container’s CLI terminal in the bottom pane. In the container’s CLI pane within Cloud9 IDE, enter the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b cpx-101 https://github.com/Citrix-TechSpecialist/NetScalerNITRO.git</span><br></pre></td></tr></table></figure><h3>Step 3 : Execute Script from IDE</h3><p>A new directory will have been created <code>NetScalerNITRO</code> with the <code>nsAuto.py</code> python script that is pre-coded to configure the CPX to loadbalance webserver-a and webserver-b.</p><p>In the bottom pane within the container’s CLI, enter the following commands to configure the CPX via NITRO scripted with Netscaler’s Python SDK. Desired state configuration is specified in the <code>nsAutoCfg.json</code> file with pre-seeded default values for our environment (i.e. backend webserver IP’s and CPX default username and pass along with its NSIP.)</p><blockquote><p>It is highly encouraged to open the <code>nsAuto.py</code> and <code>nsAutoCfg.json</code> file within the IDE to examine and learn from its contents and understand how the script is coded with NetScaler’s NITRO Python SDK.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd NetScalerNITRO</span><br><span class="line">python nsAuto.py</span><br></pre></td></tr></table></figure><p>You will see an output similar to:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Configuring NS</span><br><span class="line">Starting to configure...</span><br><span class="line">All done preforming configuration</span><br></pre></td></tr></table></figure><p>This indicates that the CPX has been configured successfully. It is load balancing Webserver A and Webserver B on its port 10000, using it’s docker container IP in the sandbox docker network. Container port 10000 is mapped to host port 10000 so you can access your load balancer at <a href="http://localhost:10000" target="_blank" rel="noopener">http://localhost:10000</a>.</p><h3>Step 4 : Validate Configurations</h3><p>To validate the configurations on the NetScaler CPX, enter the following commands on the Docker host to attach to the container’s bash terminal:</p><p><code>docker exec -it nitroide_cpx_1 /bin/bash</code> and you will have entered into CPX’s CLI.</p><p>Then enter in the following NetScaler CLI commands to view configured vservers on the ADC with the following command:</p><p><code>cli_script.sh &quot;sh lb vservers&quot;</code> and you will see an output similar to the following for the configured vserver:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1)webserver (192.168.13.20:10000) - HTTPType: ADDRESS</span><br><span class="line">State: UP</span><br><span class="line">Last state change was at Fri Jul 14 02:02:23 2017</span><br><span class="line">Time since last state change: 0 days, 01:30:54.410</span><br><span class="line">Effective State: UP</span><br><span class="line">Client Idle Timeout: 180 sec</span><br><span class="line">Down state flush: ENABLED</span><br><span class="line">Disable Primary Vserver On Down : DISABLED</span><br><span class="line">Appflow logging: ENABLED</span><br><span class="line">Port Rewrite : DISABLED</span><br><span class="line">No. of Bound Services :  2 (Total)  2 (Active)</span><br><span class="line">Configured Method: ROUNDROBINBackupMethod: NONE</span><br><span class="line">Mode: IP</span><br><span class="line">Persistence: NONE</span><br><span class="line">Vserver IP and Port insertion: OFF</span><br><span class="line">Push: DISABLEDPush VServer:</span><br><span class="line">Push Multi Clients: NO</span><br><span class="line">Push Label Rule: none</span><br><span class="line">L2Conn: OFF</span><br><span class="line">Skip Persistency: None</span><br><span class="line">Listen Policy: NONE</span><br><span class="line">IcmpResponse: PASSIVE</span><br><span class="line">RHIstate: PASSIVE</span><br><span class="line">New Service Startup Request Rate: 0 PER_SECOND, Increment Interval: 0</span><br><span class="line">Mac mode Retain Vlan: DISABLED</span><br><span class="line">DBS_LB: DISABLED</span><br><span class="line">Process Local: DISABLED</span><br><span class="line">Traffic Domain: 0</span><br><span class="line">TROFS Persistence honored: ENABLED</span><br><span class="line">Retain Connections on Cluster: NO</span><br></pre></td></tr></table></figure><h3>Review</h3><p>In this exercise we deployed a sandbox development environment with an IDE, NetScaler CPX, and 2 simple webservers using docker compose. We then logged into the IDE and cloned a repository with python code that will automatically configure the NetScaler CPX using the pre-defined input file <code>nsAutoCfg.json</code> that provides details on the desired configuration state of the CPX. We validated that the websites were being load balanced and saw the running load balancer configuration on the CPX.</p><p>Here is an overview of the procedures above:</p>  <img src="/docker-101-mod3/docker-compose-up.gif" title="docker compose up">]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Module 0&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod1&quot;&gt;Module 1&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod2&quot;&gt;Module 2&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod3&quot;&gt;Module 3&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Module 3: Using Docker Compose&lt;/h1&gt;
&lt;p&gt;Let’s assume by now you are familiar with basic Docker commands such as &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#volume-shared-filesystems&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/ps/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;docker ps&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/pull/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;docker pull&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/rm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;docker rm&lt;/code&gt;&lt;/a&gt;, and the various parameter flags (such as &lt;code&gt;-v&lt;/code&gt; for volume mounts) associated with some of these commands.&lt;/p&gt;
&lt;p&gt;It should also be obvious at this point that deploying docker containers at scale by hand with &lt;code&gt;docker run&lt;/code&gt; commands can be very involved and, at time, too complicated with multiple lines of &lt;code&gt;docker ..&lt;/code&gt; commands to deploy a large environment. Luckily, docker containers are not meant to be deployed via individual commands, rather they are often deployed to a desired state using various other tools that help automate and/or orchestrate microservices backed by docker containers. Some of these accompanying tools are provided below for reference.&lt;/p&gt;
    
    </summary>
    
      <category term="tutorials" scheme="http://blog.tahil.site/categories/tutorials/"/>
    
    
      <category term="docker" scheme="http://blog.tahil.site/tags/docker/"/>
    
      <category term="docker-cli" scheme="http://blog.tahil.site/tags/docker-cli/"/>
    
      <category term="docker 101" scheme="http://blog.tahil.site/tags/docker-101/"/>
    
      <category term="dockerfile" scheme="http://blog.tahil.site/tags/dockerfile/"/>
    
      <category term="sandbox" scheme="http://blog.tahil.site/tags/sandbox/"/>
    
      <category term="backdoor" scheme="http://blog.tahil.site/tags/backdoor/"/>
    
      <category term="container ide" scheme="http://blog.tahil.site/tags/container-ide/"/>
    
      <category term="docker-compose" scheme="http://blog.tahil.site/tags/docker-compose/"/>
    
      <category term="cloud9" scheme="http://blog.tahil.site/tags/cloud9/"/>
    
      <category term="NetScaler" scheme="http://blog.tahil.site/tags/NetScaler/"/>
    
      <category term="cpx" scheme="http://blog.tahil.site/tags/cpx/"/>
    
  </entry>
  
  <entry>
    <title>Hands on with Docker</title>
    <link href="http://blog.tahil.site/docker-101/"/>
    <id>http://blog.tahil.site/docker-101/</id>
    <published>2017-12-15T01:28:29.000Z</published>
    <updated>2017-12-15T21:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center"><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Module 0</a></th><th style="text-align:center"><a href="/docker-101-mod1">Module 1</a></th><th style="text-align:center"><a href="/docker-101-mod2">Module 2</a></th><th style="text-align:center"><a href="/docker-101-mod3">Module 3</a></th></tr></thead><tbody></tbody></table><h1>Introduction</h1><p>I figured I’d start off my first post on a topic I am deeply passionate about : <a href="https://www.docker.com/what-container" target="_blank" rel="noopener"><strong>Docker containers</strong></a>! In this tutorial, we are going to gain hands on experience and learn the basics docker containers are (how to run them, configure them, and consume them), docker images (how to use them and how to build them), docker commands, and finally learn how to automate the deployment of a simple ‘containerized environment’ with multiple ‘services’.</p><a id="more"></a><p>The end result will be a self contained dockerized <a href="https://github.com/Citrix-TechSpecialist/nitro-ide/tree/0206630bd6903887d599613a42dd65da550cc37e" target="_blank" rel="noopener">sandbox environment / IDE</a> to develop scripts and to issue them via <a href="http://docs.citrix.com/ja-jp/netscaler/11/nitro-api.html" target="_blank" rel="noopener">NITRO REST API</a> commands to your NetScaler ADCs. This is just one of <strong>many use cases</strong> to showcase container ‘orchestration’ to a desired state via simple YAML files. But before we begin, we need a brief introduction on ‘containers’ and how Docker works under the hood.  This introduction is meant to be short intentionally because the point of the tutorial below is more focused on getting “hands on experience” rather than “delving into theory”.</p><h1>Tutorial Contents</h1><ul><li><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener"><strong>Module 0</strong>: Install Docker Locally</a></li><li><a href="/docker-101-mod1"><strong>Module 1</strong>: Introduction to Docker Images and Containers</a><ul><li><em>Exercise 1</em>: Pulling Docker Images</li><li><em>Exercise 2</em>: Running a Docker Container</li></ul></li><li><a href="/docker-101-mod2"><strong>Module 2</strong>: Introduction to Docker Files</a><ul><li><em>Dockerfiles</em></li><li><em>Exercise 1</em>: Write a Dockerfile</li><li><em>Exercise 2</em>: Run another Docker Container</li></ul></li><li><a href="/docker-101-mod3"><strong>Module 3</strong>: Introduction to Docker Compose</a><ul><li><em>Exercise 1</em>: Create a <code>docker-compose.yaml</code> file</li><li><em>Exercise 2</em>: Compose an Environment</li></ul></li></ul><h1>Brief Technology Overview</h1><blockquote><p>Source of the content below comes from an article published in <a href="http://www.infoworld.com/article/3204171/linux/what-is-docker-linux-containers-explained.html" target="_blank" rel="noopener">InfoWold</a></p></blockquote><p><a href="https://blog.docker.com/2016/05/docker-101-getting-to-know-docker/" target="_blank" rel="noopener">Docker containers</a> are self-contained execution environments—with their own, isolated CPU, memory, block I/O, and network resources—that share the kernel of the host operating system. The result is <strong>something that feels like a virtual machine, but sheds all the weight and startup overhead of a guest operating system.</strong></p><p>To understand containers, we have to start with Linux <a href="https://sysadmincasts.com/episodes/14-introduction-to-linux-control-groups-cgroups" target="_blank" rel="noopener">cgroups</a> and <a href="http://blogs.igalia.com/dpino/2016/04/10/network-namespaces/" target="_blank" rel="noopener">namespaces</a>, the Linux kernel features that create the walls between containers and other processes running on the host. Linux namespaces, originally developed by IBM, wrap a set of system resources and present them to a process to make it look like they are dedicated to that process.</p><p><strong>In short:</strong></p><ul><li><strong>Namespaces</strong> :  Limits what the running process can see. I.E. processes can have their own view of the system’s resources.</li><li><strong>cgroups</strong> :  Metering and limiting mechanism, they control how much of a system resource (CPU, memory) processes can use.</li></ul><p>In comparison to virtual machines, containers feel and act like independent operating system environments, but are actually layered on top of an existing OS similar to how a VM would be on top of a hypervisor. A visual below is provided for contextual aid in comparison with traditional VM architecture vs a docker containerized architecture.</p>  <img src="/docker-101/containers-visual.png" title="Containers vs Virtual Machines"><h1>Pre-requisites</h1><ul><li><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Install Docker</a><ul><li>You must install Docker in your local environment to do this tutorial. Follow the instructions in the link provided to install Docker on your operating system.</li></ul></li></ul><blockquote><p><strong>Note</strong>: You can also find this tutorial directly on GitHub where I’ve posted an older version of this lab <a href="https://github.com/Citrix-TechSpecialist/Docker-101" target="_blank" rel="noopener">here</a> within the “Docker-101” repository of the <a href="https://github.com/Citrix-TechSpecialist" target="_blank" rel="noopener">@Citrix-TechSpecialist</a> organization.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Module 0&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod1&quot;&gt;Module 1&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod2&quot;&gt;Module 2&lt;/a&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;/docker-101-mod3&quot;&gt;Module 3&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I figured I’d start off my first post on a topic I am deeply passionate about : &lt;a href=&quot;https://www.docker.com/what-container&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Docker containers&lt;/strong&gt;&lt;/a&gt;! In this tutorial, we are going to gain hands on experience and learn the basics docker containers are (how to run them, configure them, and consume them), docker images (how to use them and how to build them), docker commands, and finally learn how to automate the deployment of a simple ‘containerized environment’ with multiple ‘services’.&lt;/p&gt;
    
    </summary>
    
      <category term="tutorials" scheme="http://blog.tahil.site/categories/tutorials/"/>
    
      <category term="docker" scheme="http://blog.tahil.site/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.tahil.site/tags/docker/"/>
    
      <category term="docker 101" scheme="http://blog.tahil.site/tags/docker-101/"/>
    
      <category term="containers" scheme="http://blog.tahil.site/tags/containers/"/>
    
  </entry>
  
</feed>
